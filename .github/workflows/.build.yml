# reusable workflow
name: .build

on:
  workflow_call:
    inputs:
      name:
        required: true
        type: string
      envs:
        required: false
        type: string

env:
  BUILD_CACHE_REGISTRY_SLUG: dockereng/packaging-cache
  DOCKER_BUILD_SUMMARY: false

jobs:
  prepare:
    runs-on: ubuntu-24.04
    outputs:
      includes: ${{ steps.matrix.outputs.includes }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Matrix
        id: matrix
        uses: actions/github-script@v7
        env:
          INPUT_NAME: ${{ inputs.name }}
        with:
          script: |
            const inpName = core.getInput('name');
            
            let def = {};
            await core.group(`Parsing definition`, async () => {
              const resPrint = await exec.getExecOutput('docker', ['buildx', 'bake', 'pkg', '--print'], {
                ignoreReturnCode: true
              });
              if (resPrint.stderr.length > 0 && resPrint.exitCode != 0) {
                throw new Error(res.stderr);
              }
              def = JSON.parse(resPrint.stdout.trim());
            });
            
            await core.group(`Generating matrix`, async () => {
              const includes = [];
              for (const targetName of Object.keys(def.target)) {
                if (!targetName.startsWith(`pkg-${inpName}`)) {
                  continue;
                }
                const match = targetName.match(/^pkg-(.+)-([^-]+)$/);
                if (!match) {
                  throw new Error(`Invalid target name: ${targetName}`);
                }
                const pkgName = match[1];
                const distro = match[2];
                const target = def.target[targetName];
                if (target.platforms && target.platforms.length > 0) {
                  target.platforms.forEach(platform => {
                    includes.push({
                      runner: platform.startsWith('linux/arm') ? 'ubuntu-24.04-arm' : 'ubuntu-24.04',
                      distro: distro,
                      platform: platform,
                      // FIXME: we can't verify platforms not native to the runner as it would segfault through emulation
                      verify: platform.startsWith('linux/386') || platform.startsWith('linux/amd64') || platform.startsWith('linux/arm64')
                    });
                  });
                } else {
                  // if no platforms are returned, this means this package does
                  // not support a distro so we skip it.
                }
              }
              core.info(JSON.stringify(includes, null, 2));
              core.setOutput('includes', JSON.stringify(includes));
            });

  build:
    runs-on: ${{ matrix.runner }}
    timeout-minutes: 20
    needs:
      - prepare
    strategy:
      fail-fast: false
      matrix:
        include: ${{ fromJson(needs.prepare.outputs.includes) }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Environment variables
        run: |
          for l in "${{ inputs.envs }}"; do
            echo "${l?}" >> $GITHUB_ENV
          done
      -
        name: Prepare
        run: |
          # Set platform pair for artifact upload
          platform=${{ matrix.platform }}
          echo "PLATFORM_PAIR=${platform//\//-}" >> $GITHUB_ENV
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v3
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
      -
        name: Build
        uses: docker/bake-action@v6
        with:
          source: .
          targets: pkg-${{ inputs.name }}-${{ matrix.distro }}
          set: |
            *.platform=${{ matrix.platform }}
      -
        name: List artifacts
        run: |
          tree -nh ./bin/pkg/${{ inputs.name }}
      -
        name: Verify
        if: ${{ matrix.verify }}
        uses: docker/bake-action@v6
        with:
          source: .
          targets: verify-${{ inputs.name }}-${{ matrix.distro }}
          set: |
            *.platform=${{ matrix.platform }}
      -
        name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: build-pkg-${{ inputs.name }}-${{ matrix.distro }}-${{ env.PLATFORM_PAIR }}
          path: ./bin/pkg/${{ inputs.name }}/*
          if-no-files-found: error
          retention-days: 1

  dummy-release:
    runs-on: ubuntu-24.04
    needs:
      - build
    steps:
      -
        name: Checkout
        uses: actions/checkout@v4
      -
        name: Environment variables
        run: |
          for l in "${{ inputs.envs }}"; do
            echo "${l?}" >> $GITHUB_ENV
          done
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
        with:
          version: latest
      -
        name: Download binaries
        uses: actions/download-artifact@v4
        with:
          path: ./bin/pkg/${{ inputs.name }}
          pattern: build-pkg-*
          merge-multiple: true
      -
        name: List binaries
        run: |
          tree -nh ./bin/pkg/${{ inputs.name }}
      -
        name: Generate metadata
        uses: docker/bake-action@v6
        with:
          source: .
          targets: metadata-${{ inputs.name }}
          provenance: false
      -
        name: Release
        uses: docker/bake-action@v6
        with:
          source: .
          targets: release-${{ inputs.name }}
          provenance: false
          set: |
            *.output=/tmp/release
      -
        name: List release artifacts
        run: |
          tree -nh /tmp/release
      -
        name: Summary
        run: |
          for l in $(cat ./bin/pkg/${{ inputs.name }}/metadata.env); do
            export "${l?}"
          done

          cat >> "$GITHUB_STEP_SUMMARY" <<-EOF
          * repo: ${REPO}
          * ref: \`${REF}\`
          * version: \`${VERSION}\`
          * commit: [\`${COMMIT}\`](${REPO}/commit/${COMMIT})
          EOF

          if [ "${{ inputs.name }}" = "containerd" ]; then
            cat >> "$GITHUB_STEP_SUMMARY" <<-EOF
          * runc
            * repo: ${RUNC_REPO}
            * ref: \`${RUNC_REF}\`
            * version: \`${RUNC_VERSION}\`
            * commit: [\`${RUNC_COMMIT}\`](${RUNC_REPO}/commit/${RUNC_COMMIT})
          EOF
          fi

          cat >> "$GITHUB_STEP_SUMMARY" <<-EOF
          * packages: \`$(find /tmp/release -type f | wc -l)\` files
          * size: \`$(du -sh /tmp/release | awk '{print $1}')\`
          EOF
