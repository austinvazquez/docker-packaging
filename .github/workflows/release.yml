name: release

on:
  workflow_dispatch:
    inputs:
      package:
        description: 'Package (e.g. buildx)'
        required: true
        type: string
      release:
        description: 'Push image and create release'
        required: false
        type: boolean

env:
  REPO_SLUG: dockereng/packaging
  BUILD_CACHE_REGISTRY_SLUG: dockereng/packaging-cache

jobs:
  prepare:
    runs-on: ubuntu-20.04
    outputs:
      matrix: ${{ steps.pkgs.outputs.matrix }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Create matrix
        id: pkgs
        run: |
          pkgs=$(make gha-release-matrix)
          echo "::set-output name=matrix::$pkgs"
      -
        name: Show matrix
        run: |
          echo ${{ steps.pkgs.outputs.matrix }}

  build:
    runs-on: ubuntu-20.04
    needs:
      - prepare
    strategy:
      fail-fast: true
      matrix:
        pkg: ${{ fromJson(needs.prepare.outputs.matrix) }}
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Set up QEMU
        uses: docker/setup-qemu-action@v2
      -
        name: Set up Docker Buildx
        id: buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Set up remote builders
        if: matrix.pkg != 'static' # do not use remote builders for static builds (cross)
        # FIXME: use docker/setup-buildx-action@v2 when https://github.com/docker/setup-buildx-action/pull/165 merged
        uses: crazy-max/docker-setup-buildx-action@append
        with:
          driver: remote
          endpoint: docker-container://buildx_buildkit_${{ steps.buildx.outputs.name }}0
          append: |
            - name: aws_graviton2
              endpoint: tcp://${{ secrets.AWS_ARM64_HOST }}:1234
              platforms: darwin/arm64,linux/arm64,linux/arm/v5,linux/arm/v6,linux/arm/v7,windows/arm64
            - name: linuxone_s390x
              endpoint: tcp://${{ secrets.LINUXONE_S390X_HOST }}:1234
              platforms: linux/s390x
        env:
          BUILDER_NODE_1_AUTH_TLS_CACERT: ${{ secrets.AWS_ARM64_CACERT }}
          BUILDER_NODE_1_AUTH_TLS_CERT: ${{ secrets.AWS_ARM64_CERT }}
          BUILDER_NODE_1_AUTH_TLS_KEY: ${{ secrets.AWS_ARM64_KEY }}
          BUILDER_NODE_2_AUTH_TLS_CACERT: ${{ secrets.LINUXONE_S390X_CACERT }}
          BUILDER_NODE_2_AUTH_TLS_CERT: ${{ secrets.LINUXONE_S390X_CERT }}
          BUILDER_NODE_2_AUTH_TLS_KEY: ${{ secrets.LINUXONE_S390X_KEY }}
      -
        name: Build
        run: |
          make -C pkg/${{ inputs.package }} build-${{ matrix.pkg }}
      -
        name: List artifacts
        run: |
          tree -nh ./pkg/${{ inputs.package }}/bin
      -
        name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: ${{ inputs.package }}
          path: ./pkg/${{ inputs.package }}/bin/*
          if-no-files-found: error
          retention-days: 1

  release:
    runs-on: ubuntu-20.04
    needs:
      - build
    steps:
      -
        name: Checkout
        uses: actions/checkout@v3
      -
        name: Prepare
        run: |
          version=$(make --no-print-directory -C pkg/${{ inputs.package }} version)
          git_tag="${{ inputs.package }}/$version"
          echo "Package: ${{ inputs.package }}"
          echo "Release: ${{ inputs.release }}"
          echo "Git tag prefix: $git_tag"
          echo "GIT_TAG=$git_tag" >> $GITHUB_ENV
          echo "VERSION=$version" >> $GITHUB_ENV
      -
        name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: ${{ inputs.package }}
          path: ./pkg/${{ inputs.package }}/bin
      -
        name: List artifacts and set summary
        run: |
          tree -nh ./pkg/${{ inputs.package }}/bin | tee /tmp/pkgs.txt
          cat > /tmp/summary.txt <<EOF
          $(make --no-print-directory -C pkg/${{ inputs.package }} summary)
          * packages: $(find ./pkg/${{ inputs.package }}/bin -type f | wc -l) files / $(du -sh ./pkg/${{ inputs.package }}/bin | awk '{print $1}')
          EOF
      -
        name: Set packages list and summary outputs
        uses: actions/github-script@v6
        id: release-summary
        with:
          script: |
            const fs = require('fs');
            core.setOutput('pkgs', fs.readFileSync('/tmp/pkgs.txt', {encoding: 'utf8'}));
            core.setOutput('summary', fs.readFileSync('/tmp/summary.txt', {encoding: 'utf8'}));
      -
        name: Docker meta
        id: meta
        uses: docker/metadata-action@v4
        with:
          images: |
            ${{ env.REPO_SLUG }}
          tags: |
            type=ref,event=pr
            type=raw,value=${{ env.GIT_TAG }}
            type=raw,value=${{ env.GIT_TAG }}-${{ github.run_number }}
            type=raw,value=${{ env.GIT_TAG }}-{{sha}}
          labels: |
            com.github.docker.packaging.run_id=${{ github.run_id }}
            com.github.docker.packaging.run_number=${{ github.run_number }}
          bake-target: meta-helper
      -
        name: Login to Docker Hub
        uses: docker/login-action@v2
        if: ${{ inputs.release }}
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      -
        name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2
      -
        name: Build image
        id: build
        uses: docker/bake-action@v2
        with:
          workdir: ./pkg/${{ inputs.package }}
          files: |
            ./docker-bake.hcl
            ${{ steps.meta.outputs.bake-file }}
          targets: release
          set: |
            *.output=type=image,push=${{ inputs.release }}
      -
        name: Create release
        uses: softprops/action-gh-release@1e07f4398721186383de40550babbdf2b84acfc5
        if: ${{ inputs.release }}
        with:
          name: ${{ env.GIT_TAG }}-${{ github.run_number }}
          draft: true
          tag_name: ${{ env.GIT_TAG }}-${{ github.run_number }}
          target_commitish: ${{ github.sha }}
          body: |
            Image available at [https://hub.docker.com/r/${{ env.REPO_SLUG }}](https://hub.docker.com/r/${{ env.REPO_SLUG }}).
            
            ## Summary
            ${{ steps.release-summary.outputs.summary }}
            
            ## Usage
            Extract with [Undock](https://github.com/crazy-max/undock):
            ```console
            $ undock --wrap --rm-dist --all ${{ env.REPO_SLUG }}:${{ steps.meta.outputs.version }} ./${{ inputs.package }}/${{ env.VERSION }}
            ```
            
            ## Packages
            <details>
              <summary>Show list</summary>

            ```text
            ${{ steps.release-summary.outputs.pkgs }}
            ```
            </details>
            
            ## Build result metadata
            <details>
              <summary><code>metadata.json</code></summary>

            ```json
            ${{ steps.build.outputs.metadata }}
            ```
            </details>
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
